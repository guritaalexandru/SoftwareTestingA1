============================= test session starts ==============================
platform darwin -- Python 3.9.18, pytest-7.4.3, pluggy-1.3.0
rootdir: /Users/antongustavsson/ASD/SoftwareTestingA1-Group11/A1_unit_testing_students
plugins: mock-3.12.0
collected 144 items

test_change_details.py .FF                                               [  2%]
test_check_cart.py ..........                                            [  9%]
test_checkout.py ..........                                              [ 15%]
test_checkout_and_payment.py ..................                          [ 28%]
test_load_products_from_csv.py ..........                                [ 35%]
test_login.py ....F......                                                [ 43%]
test_logout.py ........                                                  [ 48%]
test_products.py ........................                                [ 65%]
test_regression.py .............F..F.....................F...........    [100%]

=================================== FAILURES ===================================
_________________________ test_change_details_address __________________________

test_entry = {'address': 'Dag Hammarskälds Väg', 'credit': {'cvv': '999', 'expiry': '11/25', 'number': '0365027409470925'}, 'email': 'test@gmail.com', 'password': 'test', ...}

    def test_change_details_address(test_entry):
        with patch("builtins.input", side_effect=["Y", "a", "Raketvägen"]):
>           assert change_details(test_entry) == {
                "username": "test",
                "password": "test",
                "address": "Raketvägen",
                "phone": "07099999999",
                "email": "test@gmail.com",
                "credit": {
                    "number": "0365027409470925",
                    "expiry": "11/25",
                    "cvv": "999",
                },
            }
E           AssertionError: assert None == {'address': 'Raketvägen', 'credit': {'cvv': '999', 'expiry': '11/25', 'number': '0365027409470925'}, 'email': 'test@gmail.com', 'password': 'test', ...}
E            +  where None = change_details({'address': 'Dag Hammarskälds Väg', 'credit': {'cvv': '999', 'expiry': '11/25', 'number': '0365027409470925'}, 'email': 'test@gmail.com', 'password': 'test', ...})

test_change_details.py:29: AssertionError
_______________________ test_change_details_credit_card ________________________

test_entry = {'address': 'Dag Hammarskälds Väg', 'credit': {'cvv': '999', 'expiry': '11/25', 'number': '0365027409470925'}, 'email': 'test@gmail.com', 'password': 'test', ...}

    def test_change_details_credit_card(test_entry):
        with patch("builtins.input", side_effect=["Y", "c", "9999999999999999", "99/99", "999"]):
>           assert change_details(test_entry) == {
                "username": "test",
                "password": "test",
                "address": "Dag Hammarskälds Väg",
                "phone": "07099999999",
                "email": "test@gmail.com",
                "credit": {
                    "number": "9999999999999999",
                    "expiry": "99/99",
                    "cvv": "999",
                },
            }
E           AssertionError: assert None == {'address': 'Dag Hammarskälds Väg', 'credit': {'cvv': '999', 'expiry': '99/99', 'number': '9999999999999999'}, 'email': 'test@gmail.com', 'password': 'test', ...}
E            +  where None = change_details({'address': 'Dag Hammarskälds Väg', 'credit': {'cvv': '999', 'expiry': '11/25', 'number': '0365027409470925'}, 'email': 'test@gmail.com', 'password': 'test', ...})

test_change_details.py:44: AssertionError
_________________ test_login_new_user_register_valid_password __________________

write_to_file_stub = <MagicMock name='write_to_file' id='4529628448'>
check_password_stub_correct = <MagicMock name='check_password' id='4528807744'>

    def test_login_new_user_register_valid_password(write_to_file_stub, check_password_stub_correct):
        with patch('builtins.input', side_effect=new_user_valid_password):
>           assert login() == {"username": new_user_valid_password[0], "wallet": 0}

test_login.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
login.py:68: in login
    new_address = input("Enter a street address:")
/usr/local/Cellar/python@3.9/3.9.18_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/unittest/mock.py:1092: in __call__
    return self._mock_call(*args, **kwargs)
/usr/local/Cellar/python@3.9/3.9.18_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/unittest/mock.py:1096: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='input' id='4529016160'>
args = ('Enter a street address:',), kwargs = {}
effect = <list_iterator object at 0x10df9f400>

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
>               result = next(effect)
E               StopIteration

/usr/local/Cellar/python@3.9/3.9.18_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/unittest/mock.py:1153: StopIteration
----------------------------- Captured stdout call -----------------------------
User does not exist. Would you like to register?
________________________ test_checkout_sufficient_funds ________________________

user_2 = <checkout_and_payment.User object at 0x10dfb2520>
filled_cart = <checkout_and_payment.ShoppingCart object at 0x10dfb27c0>

    def test_checkout_sufficient_funds(user_2, filled_cart):
        # Test checkout with sufficient user funds
        with patch("sys.stdout", new_callable=io.StringIO) as mocked_stdout:
            checkout(user_2, filled_cart)
            # Assert that sufficient funds was identified in checkout
>           assert (
                mocked_stdout.getvalue()
                == "\n\nThank you for your purchase, Test_Rich! Your remaining balance is 1978.5\n"
            )
E           AssertionError: assert '\n\nThank yo...e is 1988.5\n' == '\n\nThank yo...e is 1978.5\n'
E             Skipping 60 identical leading characters in diff, use -v to show
E             - ance is 1978.5
E             ?           ^
E             + ance is 1988.5
E             ?           ^

test_regression.py:578: AssertionError
_______________________ test_checkout_just_enough_money ________________________

user_3 = <checkout_and_payment.User object at 0x10f968d60>
single_cart_2 = <checkout_and_payment.ShoppingCart object at 0x10df82c70>

    def test_checkout_just_enough_money(user_3, single_cart_2):
        # Test checkout for the case when the user has just enough money for the transaction
        with patch("sys.stdout", new_callable=io.StringIO) as mocked_stdout:
            checkout(user_3, single_cart_2)
            # Assert that 0.0 money remains in the wallet
>           assert (
                mocked_stdout.getvalue()
                == "\n\nThank you for your purchase, Test_Exakt! Your remaining balance is 0.0\n"
            )
E           assert "\n\nYou don'... try again!\n" == '\n\nThank yo...ance is 0.0\n'
E               
E               
E             - Thank you for your purchase, Test_Exakt! Your remaining balance is 0.0
E             + You don't have enough money to complete the purchase.
E             + Please try again!

test_regression.py:605: AssertionError
_ test_checkout_and_payment_scenarios[mock_input_value2-Apple added to your cart.] _

mock_input_value = ['1', 'c', 'l']
expected_output = 'Apple added to your cart.'
mock_input = <MagicMock name='input' id='4559926560'>
mock_check_cart = <MagicMock name='check_cart' id='4530062288'>
mock_logout = <MagicMock name='logout' id='4530150032'>
mock_update_users_json = <MagicMock name='update_users_json' id='4529977616'>
capsys = <_pytest.capture.CaptureFixture object at 0x10e0367c0>

    @pytest.mark.parametrize("mock_input_value, expected_output", [
        (['l'], "You have been logged out."),
        (['c', 'l'], "You have been logged out."),
        (['1', 'c', 'l'], "Apple added to your cart."),
        ([str(len(productz) + 1), 'l'], "\nInvalid input. Please try again."),
        (['apple', 'l'], "\nInvalid input. Please try again."),
        (['0.75', 'l'], "\nInvalid input. Please try again."),
        (['[]', 'l'], "\nInvalid input. Please try again.")
    ])
    def test_checkout_and_payment_scenarios(mock_input_value, expected_output, mock_input, mock_check_cart, mock_logout, mock_update_users_json, capsys):
        """Test various scenarios in checkoutAndPayment based on different user inputs."""
        mock_input.side_effect = mock_input_value
        checkoutAndPayment({"username": "testuser", "wallet": 100})
        captured = capsys.readouterr()
>       assert expected_output in captured.out
E       AssertionError: assert 'Apple added to your cart.' in '1. Banana - $1.0 - Units: 2\n2. Strawberry - $4.0 - Units: 5\n3. Carrot - $0.5 - Units: 15\n4. Broccoli - $1.5 - Unit...n66. Pens - $0.5 - Units: 10\n67. Backpack - $15.0 - Units: 1\nBanana added to your cart.\nYou have been logged out.\n'
E        +  where '1. Banana - $1.0 - Units: 2\n2. Strawberry - $4.0 - Units: 5\n3. Carrot - $0.5 - Units: 15\n4. Broccoli - $1.5 - Unit...n66. Pens - $0.5 - Units: 10\n67. Backpack - $15.0 - Units: 1\nBanana added to your cart.\nYou have been logged out.\n' = CaptureResult(out='1. Banana - $1.0 - Units: 2\n2. Strawberry - $4.0 - Units: 5\n3. Carrot - $0.5 - Units: 15\n4. Broc... - $0.5 - Units: 10\n67. Backpack - $15.0 - Units: 1\nBanana added to your cart.\nYou have been logged out.\n', err='').out

test_regression.py:724: AssertionError
=========================== short test summary info ============================
FAILED test_change_details.py::test_change_details_address - AssertionError: ...
FAILED test_change_details.py::test_change_details_credit_card - AssertionErr...
FAILED test_login.py::test_login_new_user_register_valid_password - StopItera...
FAILED test_regression.py::test_checkout_sufficient_funds - AssertionError: a...
FAILED test_regression.py::test_checkout_just_enough_money - assert "\n\nYou ...
FAILED test_regression.py::test_checkout_and_payment_scenarios[mock_input_value2-Apple added to your cart.]
======================== 6 failed, 138 passed in 1.15s =========================
