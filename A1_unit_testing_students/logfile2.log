============================= test session starts ==============================
platform darwin -- Python 3.9.18, pytest-7.4.3, pluggy-1.3.0
rootdir: /Users/antongustavsson/ASD/SoftwareTestingA1-Group11/A1_unit_testing_students
plugins: mock-3.12.0
collected 144 items

test_change_details.py ...                                               [  2%]
test_check_cart.py ..........                                            [  9%]
test_checkout.py ..........                                              [ 15%]
test_checkout_and_payment.py ..................                          [ 28%]
test_load_products_from_csv.py ..........                                [ 35%]
test_login.py F...F......                                                [ 43%]
test_logout.py ........                                                  [ 48%]
test_products.py ......................FF                                [ 65%]
test_regression.py .............F..F............F........F...........    [100%]

=================================== FAILURES ===================================
__________________ test_login_existing_user_correct_password ___________________

    def test_login_existing_user_correct_password():
        with patch('builtins.input', side_effect=valid_test_inputs):
>           assert login() == {"username": valid_test_inputs[0], "wallet": 100}

test_login.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
login.py:44: in login
    result = change_details(entry)
change_details.py:11: in change_details
    answer = input("Do you wish to change you account details? (Y/N) :\n")
/usr/local/Cellar/python@3.9/3.9.18_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/unittest/mock.py:1092: in __call__
    return self._mock_call(*args, **kwargs)
/usr/local/Cellar/python@3.9/3.9.18_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/unittest/mock.py:1096: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='input' id='4392819200'>
args = ('Do you wish to change you account details? (Y/N) :\n',), kwargs = {}
effect = <list_iterator object at 0x105d5cf10>

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
>               result = next(effect)
E               StopIteration

/usr/local/Cellar/python@3.9/3.9.18_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/unittest/mock.py:1153: StopIteration
----------------------------- Captured stdout call -----------------------------
Successfully logged in


Welcome to the store!

_________________ test_login_new_user_register_valid_password __________________

write_to_file_stub = <MagicMock name='write_to_file' id='4393062896'>
check_password_stub_correct = <MagicMock name='check_password' id='4392118640'>

    def test_login_new_user_register_valid_password(write_to_file_stub, check_password_stub_correct):
        with patch('builtins.input', side_effect=new_user_valid_password):
>           assert login() == {"username": new_user_valid_password[0], "wallet": 0}

test_login.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
login.py:68: in login
    new_address = input("Enter a street address:")
/usr/local/Cellar/python@3.9/3.9.18_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/unittest/mock.py:1092: in __call__
    return self._mock_call(*args, **kwargs)
/usr/local/Cellar/python@3.9/3.9.18_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/unittest/mock.py:1096: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='input' id='4393100528'>
args = ('Enter a street address:',), kwargs = {}
effect = <list_iterator object at 0x105d5ad00>

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
>               result = next(effect)
E               StopIteration

/usr/local/Cellar/python@3.9/3.9.18_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/unittest/mock.py:1153: StopIteration
----------------------------- Captured stdout call -----------------------------
User does not exist. Would you like to register?
_______________________ test_search_and_buy_product_all ________________________

mock_login = <MagicMock name='login' id='4392694304'>
check_password_stub_correct = <MagicMock name='check_password' id='4392668224'>
mock_display_csv_as_table = <MagicMock name='display_csv_as_table' id='4392508912'>
mock_checkout_and_payment = <MagicMock name='checkoutAndPayment' id='4419575280'>
mock_input_all = <MagicMock name='input' id='4392647840'>
mock_input_login = <MagicMock name='input' id='4392519328'>
mock_input_checkout_and_payment = <MagicMock name='input' id='4392991232'>
mock_open_users = <MagicMock name='open' id='4393015712'>

    def test_search_and_buy_product_all(mock_login, check_password_stub_correct, mock_display_csv_as_table,
                                        mock_checkout_and_payment,
                                        mock_input_all, mock_input_login, mock_input_checkout_and_payment, mock_open_users):
>       searchAndBuyProduct()

test_products.py:261: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
products.py:38: in searchAndBuyProduct
    login_info = login()
login.py:44: in login
    result = change_details(entry)
change_details.py:11: in change_details
    answer = input("Do you wish to change you account details? (Y/N) :\n")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_pytest.capture.DontReadFromInput object at 0x105793940>, size = -1

    def read(self, size: int = -1) -> str:
>       raise OSError(
            "pytest: reading from stdin while output is captured!  Consider using `-s`."
        )
E       OSError: pytest: reading from stdin while output is captured!  Consider using `-s`.

/usr/local/lib/python3.9/site-packages/_pytest/capture.py:202: OSError
----------------------------- Captured stdout call -----------------------------
Successfully logged in


Welcome to the store!

Do you wish to change you account details? (Y/N) :
____________________ test_search_and_buy_products_filtered _____________________

mock_login = <MagicMock name='login' id='4392957744'>
check_password_stub_correct = <MagicMock name='check_password' id='4392631120'>
mock_checkout_and_payment = <MagicMock name='checkoutAndPayment' id='4393159408'>
mock_display_filtered_table = <MagicMock name='display_filtered_table' id='4393099520'>
mock_input_filtered = <MagicMock name='input' id='4392932304'>
mock_input_login = <MagicMock name='input' id='4392122448'>
mock_input_checkout_and_payment = <MagicMock name='input' id='4392408448'>
mock_open_users = <MagicMock name='open' id='4393608720'>

    def test_search_and_buy_products_filtered(mock_login, check_password_stub_correct,
                                              mock_checkout_and_payment, mock_display_filtered_table,
                                              mock_input_filtered, mock_input_login, mock_input_checkout_and_payment,
                                              mock_open_users):
>       searchAndBuyProduct()

test_products.py:269: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
products.py:38: in searchAndBuyProduct
    login_info = login()
login.py:44: in login
    result = change_details(entry)
change_details.py:11: in change_details
    answer = input("Do you wish to change you account details? (Y/N) :\n")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_pytest.capture.DontReadFromInput object at 0x105793940>, size = -1

    def read(self, size: int = -1) -> str:
>       raise OSError(
            "pytest: reading from stdin while output is captured!  Consider using `-s`."
        )
E       OSError: pytest: reading from stdin while output is captured!  Consider using `-s`.

/usr/local/lib/python3.9/site-packages/_pytest/capture.py:202: OSError
----------------------------- Captured stdout call -----------------------------
Successfully logged in


Welcome to the store!

Do you wish to change you account details? (Y/N) :
________________________ test_checkout_sufficient_funds ________________________

user_2 = <checkout_and_payment.User object at 0x107705490>
filled_cart = <checkout_and_payment.ShoppingCart object at 0x107705400>

    def test_checkout_sufficient_funds(user_2, filled_cart):
        # Test checkout with sufficient user funds
        with patch("sys.stdout", new_callable=io.StringIO) as mocked_stdout:
            checkout(user_2, filled_cart)
            # Assert that sufficient funds was identified in checkout
>           assert (
                mocked_stdout.getvalue()
                == "\n\nThank you for your purchase, Test_Rich! Your remaining balance is 1978.5\n"
            )
E           AssertionError: assert '\n\nThank yo...e is 1988.0\n' == '\n\nThank yo...e is 1978.5\n'
E             Skipping 60 identical leading characters in diff, use -v to show
E             - ance is 1978.5
E             ?           ^  ^
E             + ance is 1988.0
E             ?           ^  ^

test_regression.py:578: AssertionError
_______________________ test_checkout_just_enough_money ________________________

user_3 = <checkout_and_payment.User object at 0x1077051f0>
single_cart_2 = <checkout_and_payment.ShoppingCart object at 0x107705820>

    def test_checkout_just_enough_money(user_3, single_cart_2):
        # Test checkout for the case when the user has just enough money for the transaction
        with patch("sys.stdout", new_callable=io.StringIO) as mocked_stdout:
            checkout(user_3, single_cart_2)
            # Assert that 0.0 money remains in the wallet
>           assert (
                mocked_stdout.getvalue()
                == "\n\nThank you for your purchase, Test_Exakt! Your remaining balance is 0.0\n"
            )
E           assert "\n\nYou don'... try again!\n" == '\n\nThank yo...ance is 0.0\n'
E               
E               
E             - Thank you for your purchase, Test_Exakt! Your remaining balance is 0.0
E             + You don't have enough money to complete the purchase.
E             + Please try again!

test_regression.py:605: AssertionError
____________________ test_search_and_buy_products_filtered _____________________

mock_login = <MagicMock name='login' id='4393092720'>
check_password_stub_correct = <MagicMock name='check_password' id='4393647696'>
mock_checkout_and_payment = <MagicMock name='checkoutAndPayment' id='4419740576'>
mock_display_filtered_table = <MagicMock name='display_filtered_table' id='4419699376'>
mock_input_filtered = <MagicMock name='input' id='4419649984'>
mock_input_login = <MagicMock name='input' id='4393182784'>
mock_input_checkout_and_payment = <MagicMock name='input' id='4393177248'>
mock_open_users = <MagicMock name='open' id='4393410864'>

    def test_search_and_buy_products_filtered(mock_login, check_password_stub_correct,
                                              mock_checkout_and_payment, mock_display_filtered_table,
                                              mock_input_filtered, mock_input_login, mock_input_checkout_and_payment,
                                              mock_open_users):
>       searchAndBuyProduct()

test_regression.py:683: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
products.py:38: in searchAndBuyProduct
    login_info = login()
login.py:44: in login
    result = change_details(entry)
change_details.py:11: in change_details
    answer = input("Do you wish to change you account details? (Y/N) :\n")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_pytest.capture.DontReadFromInput object at 0x105793940>, size = -1

    def read(self, size: int = -1) -> str:
>       raise OSError(
            "pytest: reading from stdin while output is captured!  Consider using `-s`."
        )
E       OSError: pytest: reading from stdin while output is captured!  Consider using `-s`.

/usr/local/lib/python3.9/site-packages/_pytest/capture.py:202: OSError
----------------------------- Captured stdout call -----------------------------
Successfully logged in


Welcome to the store!

Do you wish to change you account details? (Y/N) :
_ test_checkout_and_payment_scenarios[mock_input_value2-Apple added to your cart.] _

mock_input_value = ['1', 'c', 'l']
expected_output = 'Apple added to your cart.'
mock_input = <MagicMock name='input' id='4393878144'>
mock_check_cart = <MagicMock name='check_cart' id='4400053216'>
mock_logout = <MagicMock name='logout' id='4400020256'>
mock_update_users_json = <MagicMock name='update_users_json' id='4399921808'>
capsys = <_pytest.capture.CaptureFixture object at 0x106439520>

    @pytest.mark.parametrize("mock_input_value, expected_output", [
        (['l'], "You have been logged out."),
        (['c', 'l'], "You have been logged out."),
        (['1', 'c', 'l'], "Apple added to your cart."),
        ([str(len(productz) + 1), 'l'], "\nInvalid input. Please try again."),
        (['apple', 'l'], "\nInvalid input. Please try again."),
        (['0.75', 'l'], "\nInvalid input. Please try again."),
        (['[]', 'l'], "\nInvalid input. Please try again.")
    ])
    def test_checkout_and_payment_scenarios(mock_input_value, expected_output, mock_input, mock_check_cart, mock_logout, mock_update_users_json, capsys):
        """Test various scenarios in checkoutAndPayment based on different user inputs."""
        mock_input.side_effect = mock_input_value
        checkoutAndPayment({"username": "testuser", "wallet": 100})
        captured = capsys.readouterr()
>       assert expected_output in captured.out
E       AssertionError: assert 'Apple added to your cart.' in '1. Banana - $1.0 - Units: 6\n2. Strawberry - $4.0 - Units: 4\n3. Carrot - $0.5 - Units: 16\n4. Broccoli - $1.5 - Unit...n66. Pens - $0.5 - Units: 10\n67. Backpack - $15.0 - Units: 1\nBanana added to your cart.\nYou have been logged out.\n'
E        +  where '1. Banana - $1.0 - Units: 6\n2. Strawberry - $4.0 - Units: 4\n3. Carrot - $0.5 - Units: 16\n4. Broccoli - $1.5 - Unit...n66. Pens - $0.5 - Units: 10\n67. Backpack - $15.0 - Units: 1\nBanana added to your cart.\nYou have been logged out.\n' = CaptureResult(out='1. Banana - $1.0 - Units: 6\n2. Strawberry - $4.0 - Units: 4\n3. Carrot - $0.5 - Units: 16\n4. Broc... - $0.5 - Units: 10\n67. Backpack - $15.0 - Units: 1\nBanana added to your cart.\nYou have been logged out.\n', err='').out

test_regression.py:724: AssertionError
=========================== short test summary info ============================
FAILED test_login.py::test_login_existing_user_correct_password - StopIteration
FAILED test_login.py::test_login_new_user_register_valid_password - StopItera...
FAILED test_products.py::test_search_and_buy_product_all - OSError: pytest: r...
FAILED test_products.py::test_search_and_buy_products_filtered - OSError: pyt...
FAILED test_regression.py::test_checkout_sufficient_funds - AssertionError: a...
FAILED test_regression.py::test_checkout_just_enough_money - assert "\n\nYou ...
FAILED test_regression.py::test_search_and_buy_products_filtered - OSError: p...
FAILED test_regression.py::test_checkout_and_payment_scenarios[mock_input_value2-Apple added to your cart.]
======================== 8 failed, 136 passed in 1.13s =========================
